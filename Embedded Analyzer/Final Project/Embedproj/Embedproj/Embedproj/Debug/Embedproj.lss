
Embedproj.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000003ae  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000033a  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000013ed  00800100  00800100  000003ae  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003ae  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003e0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000080  00000000  00000000  00000420  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000bbf  00000000  00000000  000004a0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000087e  00000000  00000000  0000105f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004f1  00000000  00000000  000018dd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001cc  00000000  00000000  00001dd0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000511  00000000  00000000  00001f9c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000059c  00000000  00000000  000024ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000088  00000000  00000000  00002a49  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
   2:	33 c0       	rjmp	.+102    	; 0x6a <__bad_interrupt>
   4:	32 c0       	rjmp	.+100    	; 0x6a <__bad_interrupt>
   6:	31 c0       	rjmp	.+98     	; 0x6a <__bad_interrupt>
   8:	30 c0       	rjmp	.+96     	; 0x6a <__bad_interrupt>
   a:	2f c0       	rjmp	.+94     	; 0x6a <__bad_interrupt>
   c:	2e c0       	rjmp	.+92     	; 0x6a <__bad_interrupt>
   e:	2d c0       	rjmp	.+90     	; 0x6a <__bad_interrupt>
  10:	2c c0       	rjmp	.+88     	; 0x6a <__bad_interrupt>
  12:	2b c0       	rjmp	.+86     	; 0x6a <__bad_interrupt>
  14:	2a c0       	rjmp	.+84     	; 0x6a <__bad_interrupt>
  16:	29 c0       	rjmp	.+82     	; 0x6a <__bad_interrupt>
  18:	28 c0       	rjmp	.+80     	; 0x6a <__bad_interrupt>
  1a:	27 c0       	rjmp	.+78     	; 0x6a <__bad_interrupt>
  1c:	26 c0       	rjmp	.+76     	; 0x6a <__bad_interrupt>
  1e:	25 c0       	rjmp	.+74     	; 0x6a <__bad_interrupt>
  20:	24 c0       	rjmp	.+72     	; 0x6a <__bad_interrupt>
  22:	23 c0       	rjmp	.+70     	; 0x6a <__bad_interrupt>
  24:	73 c0       	rjmp	.+230    	; 0x10c <__vector_18>
  26:	21 c0       	rjmp	.+66     	; 0x6a <__bad_interrupt>
  28:	20 c0       	rjmp	.+64     	; 0x6a <__bad_interrupt>
  2a:	1f c0       	rjmp	.+62     	; 0x6a <__bad_interrupt>
  2c:	1e c0       	rjmp	.+60     	; 0x6a <__bad_interrupt>
  2e:	1d c0       	rjmp	.+58     	; 0x6a <__bad_interrupt>
  30:	1c c0       	rjmp	.+56     	; 0x6a <__bad_interrupt>
  32:	1b c0       	rjmp	.+54     	; 0x6a <__bad_interrupt>

00000034 <__ctors_end>:
  34:	11 24       	eor	r1, r1
  36:	1f be       	out	0x3f, r1	; 63
  38:	cf ef       	ldi	r28, 0xFF	; 255
  3a:	d4 e0       	ldi	r29, 0x04	; 4
  3c:	de bf       	out	0x3e, r29	; 62
  3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_copy_data>:
  40:	11 e0       	ldi	r17, 0x01	; 1
  42:	a0 e0       	ldi	r26, 0x00	; 0
  44:	b1 e0       	ldi	r27, 0x01	; 1
  46:	ea e3       	ldi	r30, 0x3A	; 58
  48:	f3 e0       	ldi	r31, 0x03	; 3
  4a:	02 c0       	rjmp	.+4      	; 0x50 <__do_copy_data+0x10>
  4c:	05 90       	lpm	r0, Z+
  4e:	0d 92       	st	X+, r0
  50:	a0 30       	cpi	r26, 0x00	; 0
  52:	b1 07       	cpc	r27, r17
  54:	d9 f7       	brne	.-10     	; 0x4c <__do_copy_data+0xc>

00000056 <__do_clear_bss>:
  56:	24 e1       	ldi	r18, 0x14	; 20
  58:	a0 e0       	ldi	r26, 0x00	; 0
  5a:	b1 e0       	ldi	r27, 0x01	; 1
  5c:	01 c0       	rjmp	.+2      	; 0x60 <.do_clear_bss_start>

0000005e <.do_clear_bss_loop>:
  5e:	1d 92       	st	X+, r1

00000060 <.do_clear_bss_start>:
  60:	ad 3e       	cpi	r26, 0xED	; 237
  62:	b2 07       	cpc	r27, r18
  64:	e1 f7       	brne	.-8      	; 0x5e <.do_clear_bss_loop>
  66:	4e d0       	rcall	.+156    	; 0x104 <main>
  68:	66 c1       	rjmp	.+716    	; 0x336 <_exit>

0000006a <__bad_interrupt>:
  6a:	ca cf       	rjmp	.-108    	; 0x0 <__vectors>

0000006c <adc_init>:
}
unsigned char uart_buffer_empty(void){
	// Returns TRUE if receive buffer is empty.
	
	return (rx_buffer_tail == rx_buffer_head);
}
  6c:	80 e4       	ldi	r24, 0x40	; 64
  6e:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__EEPROM_REGION_LENGTH__+0x7f007c>
  72:	87 e8       	ldi	r24, 0x87	; 135
  74:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__EEPROM_REGION_LENGTH__+0x7f007a>
  78:	08 95       	ret

0000007a <adc_read>:
  7a:	ec e7       	ldi	r30, 0x7C	; 124
  7c:	f0 e0       	ldi	r31, 0x00	; 0
  7e:	90 81       	ld	r25, Z
  80:	98 7f       	andi	r25, 0xF8	; 248
  82:	87 70       	andi	r24, 0x07	; 7
  84:	89 2b       	or	r24, r25
  86:	80 83       	st	Z, r24
  88:	ea e7       	ldi	r30, 0x7A	; 122
  8a:	f0 e0       	ldi	r31, 0x00	; 0
  8c:	80 81       	ld	r24, Z
  8e:	80 64       	ori	r24, 0x40	; 64
  90:	80 83       	st	Z, r24
  92:	80 81       	ld	r24, Z
  94:	86 fd       	sbrc	r24, 6
  96:	fd cf       	rjmp	.-6      	; 0x92 <adc_read+0x18>
  98:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__EEPROM_REGION_LENGTH__+0x7f0078>
  9c:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__EEPROM_REGION_LENGTH__+0x7f0079>
  a0:	08 95       	ret

000000a2 <getSamples>:
  a2:	10 e0       	ldi	r17, 0x00	; 0
  a4:	80 e0       	ldi	r24, 0x00	; 0
  a6:	e9 df       	rcall	.-46     	; 0x7a <adc_read>
  a8:	c1 2f       	mov	r28, r17
  aa:	d0 e0       	ldi	r29, 0x00	; 0
  ac:	cc 0f       	add	r28, r28
  ae:	dd 1f       	adc	r29, r29
  b0:	cc 0f       	add	r28, r28
  b2:	dd 1f       	adc	r29, r29
  b4:	c0 50       	subi	r28, 0x00	; 0
  b6:	df 4f       	sbci	r29, 0xFF	; 255
  b8:	bc 01       	movw	r22, r24
  ba:	80 e0       	ldi	r24, 0x00	; 0
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	4a d0       	rcall	.+148    	; 0x154 <__floatunsisf>
  c0:	20 e0       	ldi	r18, 0x00	; 0
  c2:	30 e0       	ldi	r19, 0x00	; 0
  c4:	40 ea       	ldi	r20, 0xA0	; 160
  c6:	50 e4       	ldi	r21, 0x40	; 64
  c8:	d3 d0       	rcall	.+422    	; 0x270 <__mulsf3>
  ca:	20 e0       	ldi	r18, 0x00	; 0
  cc:	30 e0       	ldi	r19, 0x00	; 0
  ce:	40 e8       	ldi	r20, 0x80	; 128
  d0:	5a e3       	ldi	r21, 0x3A	; 58
  d2:	ce d0       	rcall	.+412    	; 0x270 <__mulsf3>
  d4:	68 83       	st	Y, r22
  d6:	79 83       	std	Y+1, r23	; 0x01
  d8:	8a 83       	std	Y+2, r24	; 0x02
  da:	9b 83       	std	Y+3, r25	; 0x03
  dc:	1f 5f       	subi	r17, 0xFF	; 255
  de:	e2 cf       	rjmp	.-60     	; 0xa4 <getSamples+0x2>

000000e0 <usart_init>:
  e0:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__EEPROM_REGION_LENGTH__+0x7f00c5>
  e4:	83 e3       	ldi	r24, 0x33	; 51
  e6:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__EEPROM_REGION_LENGTH__+0x7f00c4>
  ea:	88 e9       	ldi	r24, 0x98	; 152
  ec:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__EEPROM_REGION_LENGTH__+0x7f00c1>
  f0:	86 e0       	ldi	r24, 0x06	; 6
  f2:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__EEPROM_REGION_LENGTH__+0x7f00c2>
  f6:	51 9a       	sbi	0x0a, 1	; 10
  f8:	50 98       	cbi	0x0a, 0	; 10
  fa:	10 92 88 14 	sts	0x1488, r1	; 0x801488 <rx_buffer_head>
  fe:	10 92 89 14 	sts	0x1489, r1	; 0x801489 <rx_buffer_tail>
 102:	08 95       	ret

00000104 <main>:
 104:	78 94       	sei
 106:	b2 df       	rcall	.-156    	; 0x6c <adc_init>
 108:	eb df       	rcall	.-42     	; 0xe0 <usart_init>
 10a:	cb df       	rcall	.-106    	; 0xa2 <getSamples>

0000010c <__vector_18>:



ISR(USART_RX_vect)
{
 10c:	1f 92       	push	r1
 10e:	0f 92       	push	r0
 110:	0f b6       	in	r0, 0x3f	; 63
 112:	0f 92       	push	r0
 114:	11 24       	eor	r1, r1
 116:	8f 93       	push	r24
 118:	ef 93       	push	r30
 11a:	ff 93       	push	r31
	// UART receive interrupt handler.
	// To do: check and warn if buffer overflows.
	
	char c = UDR0;
 11c:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__EEPROM_REGION_LENGTH__+0x7f00c6>
	rx_buffer[rx_buffer_head] = c;
 120:	e0 91 88 14 	lds	r30, 0x1488	; 0x801488 <rx_buffer_head>
 124:	f0 e0       	ldi	r31, 0x00	; 0
 126:	e6 57       	subi	r30, 0x76	; 118
 128:	fb 4e       	sbci	r31, 0xEB	; 235
 12a:	80 83       	st	Z, r24
	if (rx_buffer_head == RX_BUFFER_SIZE - 1)
 12c:	80 91 88 14 	lds	r24, 0x1488	; 0x801488 <rx_buffer_head>
 130:	8f 33       	cpi	r24, 0x3F	; 63
 132:	19 f4       	brne	.+6      	; 0x13a <__vector_18+0x2e>
	rx_buffer_head = 0;
 134:	10 92 88 14 	sts	0x1488, r1	; 0x801488 <rx_buffer_head>
 138:	05 c0       	rjmp	.+10     	; 0x144 <__vector_18+0x38>
	else
	rx_buffer_head++;
 13a:	80 91 88 14 	lds	r24, 0x1488	; 0x801488 <rx_buffer_head>
 13e:	8f 5f       	subi	r24, 0xFF	; 255
 140:	80 93 88 14 	sts	0x1488, r24	; 0x801488 <rx_buffer_head>
}
 144:	ff 91       	pop	r31
 146:	ef 91       	pop	r30
 148:	8f 91       	pop	r24
 14a:	0f 90       	pop	r0
 14c:	0f be       	out	0x3f, r0	; 63
 14e:	0f 90       	pop	r0
 150:	1f 90       	pop	r1
 152:	18 95       	reti

00000154 <__floatunsisf>:
 154:	e8 94       	clt
 156:	09 c0       	rjmp	.+18     	; 0x16a <__floatsisf+0x12>

00000158 <__floatsisf>:
 158:	97 fb       	bst	r25, 7
 15a:	3e f4       	brtc	.+14     	; 0x16a <__floatsisf+0x12>
 15c:	90 95       	com	r25
 15e:	80 95       	com	r24
 160:	70 95       	com	r23
 162:	61 95       	neg	r22
 164:	7f 4f       	sbci	r23, 0xFF	; 255
 166:	8f 4f       	sbci	r24, 0xFF	; 255
 168:	9f 4f       	sbci	r25, 0xFF	; 255
 16a:	99 23       	and	r25, r25
 16c:	a9 f0       	breq	.+42     	; 0x198 <__floatsisf+0x40>
 16e:	f9 2f       	mov	r31, r25
 170:	96 e9       	ldi	r25, 0x96	; 150
 172:	bb 27       	eor	r27, r27
 174:	93 95       	inc	r25
 176:	f6 95       	lsr	r31
 178:	87 95       	ror	r24
 17a:	77 95       	ror	r23
 17c:	67 95       	ror	r22
 17e:	b7 95       	ror	r27
 180:	f1 11       	cpse	r31, r1
 182:	f8 cf       	rjmp	.-16     	; 0x174 <__floatsisf+0x1c>
 184:	fa f4       	brpl	.+62     	; 0x1c4 <__floatsisf+0x6c>
 186:	bb 0f       	add	r27, r27
 188:	11 f4       	brne	.+4      	; 0x18e <__floatsisf+0x36>
 18a:	60 ff       	sbrs	r22, 0
 18c:	1b c0       	rjmp	.+54     	; 0x1c4 <__floatsisf+0x6c>
 18e:	6f 5f       	subi	r22, 0xFF	; 255
 190:	7f 4f       	sbci	r23, 0xFF	; 255
 192:	8f 4f       	sbci	r24, 0xFF	; 255
 194:	9f 4f       	sbci	r25, 0xFF	; 255
 196:	16 c0       	rjmp	.+44     	; 0x1c4 <__floatsisf+0x6c>
 198:	88 23       	and	r24, r24
 19a:	11 f0       	breq	.+4      	; 0x1a0 <__floatsisf+0x48>
 19c:	96 e9       	ldi	r25, 0x96	; 150
 19e:	11 c0       	rjmp	.+34     	; 0x1c2 <__floatsisf+0x6a>
 1a0:	77 23       	and	r23, r23
 1a2:	21 f0       	breq	.+8      	; 0x1ac <__floatsisf+0x54>
 1a4:	9e e8       	ldi	r25, 0x8E	; 142
 1a6:	87 2f       	mov	r24, r23
 1a8:	76 2f       	mov	r23, r22
 1aa:	05 c0       	rjmp	.+10     	; 0x1b6 <__floatsisf+0x5e>
 1ac:	66 23       	and	r22, r22
 1ae:	71 f0       	breq	.+28     	; 0x1cc <__floatsisf+0x74>
 1b0:	96 e8       	ldi	r25, 0x86	; 134
 1b2:	86 2f       	mov	r24, r22
 1b4:	70 e0       	ldi	r23, 0x00	; 0
 1b6:	60 e0       	ldi	r22, 0x00	; 0
 1b8:	2a f0       	brmi	.+10     	; 0x1c4 <__floatsisf+0x6c>
 1ba:	9a 95       	dec	r25
 1bc:	66 0f       	add	r22, r22
 1be:	77 1f       	adc	r23, r23
 1c0:	88 1f       	adc	r24, r24
 1c2:	da f7       	brpl	.-10     	; 0x1ba <__floatsisf+0x62>
 1c4:	88 0f       	add	r24, r24
 1c6:	96 95       	lsr	r25
 1c8:	87 95       	ror	r24
 1ca:	97 f9       	bld	r25, 7
 1cc:	08 95       	ret

000001ce <__fp_inf>:
 1ce:	97 f9       	bld	r25, 7
 1d0:	9f 67       	ori	r25, 0x7F	; 127
 1d2:	80 e8       	ldi	r24, 0x80	; 128
 1d4:	70 e0       	ldi	r23, 0x00	; 0
 1d6:	60 e0       	ldi	r22, 0x00	; 0
 1d8:	08 95       	ret

000001da <__fp_nan>:
 1da:	9f ef       	ldi	r25, 0xFF	; 255
 1dc:	80 ec       	ldi	r24, 0xC0	; 192
 1de:	08 95       	ret

000001e0 <__fp_pscA>:
 1e0:	00 24       	eor	r0, r0
 1e2:	0a 94       	dec	r0
 1e4:	16 16       	cp	r1, r22
 1e6:	17 06       	cpc	r1, r23
 1e8:	18 06       	cpc	r1, r24
 1ea:	09 06       	cpc	r0, r25
 1ec:	08 95       	ret

000001ee <__fp_pscB>:
 1ee:	00 24       	eor	r0, r0
 1f0:	0a 94       	dec	r0
 1f2:	12 16       	cp	r1, r18
 1f4:	13 06       	cpc	r1, r19
 1f6:	14 06       	cpc	r1, r20
 1f8:	05 06       	cpc	r0, r21
 1fa:	08 95       	ret

000001fc <__fp_round>:
 1fc:	09 2e       	mov	r0, r25
 1fe:	03 94       	inc	r0
 200:	00 0c       	add	r0, r0
 202:	11 f4       	brne	.+4      	; 0x208 <__fp_round+0xc>
 204:	88 23       	and	r24, r24
 206:	52 f0       	brmi	.+20     	; 0x21c <__fp_round+0x20>
 208:	bb 0f       	add	r27, r27
 20a:	40 f4       	brcc	.+16     	; 0x21c <__fp_round+0x20>
 20c:	bf 2b       	or	r27, r31
 20e:	11 f4       	brne	.+4      	; 0x214 <__fp_round+0x18>
 210:	60 ff       	sbrs	r22, 0
 212:	04 c0       	rjmp	.+8      	; 0x21c <__fp_round+0x20>
 214:	6f 5f       	subi	r22, 0xFF	; 255
 216:	7f 4f       	sbci	r23, 0xFF	; 255
 218:	8f 4f       	sbci	r24, 0xFF	; 255
 21a:	9f 4f       	sbci	r25, 0xFF	; 255
 21c:	08 95       	ret

0000021e <__fp_split3>:
 21e:	57 fd       	sbrc	r21, 7
 220:	90 58       	subi	r25, 0x80	; 128
 222:	44 0f       	add	r20, r20
 224:	55 1f       	adc	r21, r21
 226:	59 f0       	breq	.+22     	; 0x23e <__fp_splitA+0x10>
 228:	5f 3f       	cpi	r21, 0xFF	; 255
 22a:	71 f0       	breq	.+28     	; 0x248 <__fp_splitA+0x1a>
 22c:	47 95       	ror	r20

0000022e <__fp_splitA>:
 22e:	88 0f       	add	r24, r24
 230:	97 fb       	bst	r25, 7
 232:	99 1f       	adc	r25, r25
 234:	61 f0       	breq	.+24     	; 0x24e <__fp_splitA+0x20>
 236:	9f 3f       	cpi	r25, 0xFF	; 255
 238:	79 f0       	breq	.+30     	; 0x258 <__fp_splitA+0x2a>
 23a:	87 95       	ror	r24
 23c:	08 95       	ret
 23e:	12 16       	cp	r1, r18
 240:	13 06       	cpc	r1, r19
 242:	14 06       	cpc	r1, r20
 244:	55 1f       	adc	r21, r21
 246:	f2 cf       	rjmp	.-28     	; 0x22c <__fp_split3+0xe>
 248:	46 95       	lsr	r20
 24a:	f1 df       	rcall	.-30     	; 0x22e <__fp_splitA>
 24c:	08 c0       	rjmp	.+16     	; 0x25e <__fp_splitA+0x30>
 24e:	16 16       	cp	r1, r22
 250:	17 06       	cpc	r1, r23
 252:	18 06       	cpc	r1, r24
 254:	99 1f       	adc	r25, r25
 256:	f1 cf       	rjmp	.-30     	; 0x23a <__fp_splitA+0xc>
 258:	86 95       	lsr	r24
 25a:	71 05       	cpc	r23, r1
 25c:	61 05       	cpc	r22, r1
 25e:	08 94       	sec
 260:	08 95       	ret

00000262 <__fp_zero>:
 262:	e8 94       	clt

00000264 <__fp_szero>:
 264:	bb 27       	eor	r27, r27
 266:	66 27       	eor	r22, r22
 268:	77 27       	eor	r23, r23
 26a:	cb 01       	movw	r24, r22
 26c:	97 f9       	bld	r25, 7
 26e:	08 95       	ret

00000270 <__mulsf3>:
 270:	0b d0       	rcall	.+22     	; 0x288 <__mulsf3x>
 272:	c4 cf       	rjmp	.-120    	; 0x1fc <__fp_round>
 274:	b5 df       	rcall	.-150    	; 0x1e0 <__fp_pscA>
 276:	28 f0       	brcs	.+10     	; 0x282 <__mulsf3+0x12>
 278:	ba df       	rcall	.-140    	; 0x1ee <__fp_pscB>
 27a:	18 f0       	brcs	.+6      	; 0x282 <__mulsf3+0x12>
 27c:	95 23       	and	r25, r21
 27e:	09 f0       	breq	.+2      	; 0x282 <__mulsf3+0x12>
 280:	a6 cf       	rjmp	.-180    	; 0x1ce <__fp_inf>
 282:	ab cf       	rjmp	.-170    	; 0x1da <__fp_nan>
 284:	11 24       	eor	r1, r1
 286:	ee cf       	rjmp	.-36     	; 0x264 <__fp_szero>

00000288 <__mulsf3x>:
 288:	ca df       	rcall	.-108    	; 0x21e <__fp_split3>
 28a:	a0 f3       	brcs	.-24     	; 0x274 <__mulsf3+0x4>

0000028c <__mulsf3_pse>:
 28c:	95 9f       	mul	r25, r21
 28e:	d1 f3       	breq	.-12     	; 0x284 <__mulsf3+0x14>
 290:	95 0f       	add	r25, r21
 292:	50 e0       	ldi	r21, 0x00	; 0
 294:	55 1f       	adc	r21, r21
 296:	62 9f       	mul	r22, r18
 298:	f0 01       	movw	r30, r0
 29a:	72 9f       	mul	r23, r18
 29c:	bb 27       	eor	r27, r27
 29e:	f0 0d       	add	r31, r0
 2a0:	b1 1d       	adc	r27, r1
 2a2:	63 9f       	mul	r22, r19
 2a4:	aa 27       	eor	r26, r26
 2a6:	f0 0d       	add	r31, r0
 2a8:	b1 1d       	adc	r27, r1
 2aa:	aa 1f       	adc	r26, r26
 2ac:	64 9f       	mul	r22, r20
 2ae:	66 27       	eor	r22, r22
 2b0:	b0 0d       	add	r27, r0
 2b2:	a1 1d       	adc	r26, r1
 2b4:	66 1f       	adc	r22, r22
 2b6:	82 9f       	mul	r24, r18
 2b8:	22 27       	eor	r18, r18
 2ba:	b0 0d       	add	r27, r0
 2bc:	a1 1d       	adc	r26, r1
 2be:	62 1f       	adc	r22, r18
 2c0:	73 9f       	mul	r23, r19
 2c2:	b0 0d       	add	r27, r0
 2c4:	a1 1d       	adc	r26, r1
 2c6:	62 1f       	adc	r22, r18
 2c8:	83 9f       	mul	r24, r19
 2ca:	a0 0d       	add	r26, r0
 2cc:	61 1d       	adc	r22, r1
 2ce:	22 1f       	adc	r18, r18
 2d0:	74 9f       	mul	r23, r20
 2d2:	33 27       	eor	r19, r19
 2d4:	a0 0d       	add	r26, r0
 2d6:	61 1d       	adc	r22, r1
 2d8:	23 1f       	adc	r18, r19
 2da:	84 9f       	mul	r24, r20
 2dc:	60 0d       	add	r22, r0
 2de:	21 1d       	adc	r18, r1
 2e0:	82 2f       	mov	r24, r18
 2e2:	76 2f       	mov	r23, r22
 2e4:	6a 2f       	mov	r22, r26
 2e6:	11 24       	eor	r1, r1
 2e8:	9f 57       	subi	r25, 0x7F	; 127
 2ea:	50 40       	sbci	r21, 0x00	; 0
 2ec:	8a f0       	brmi	.+34     	; 0x310 <__mulsf3_pse+0x84>
 2ee:	e1 f0       	breq	.+56     	; 0x328 <__mulsf3_pse+0x9c>
 2f0:	88 23       	and	r24, r24
 2f2:	4a f0       	brmi	.+18     	; 0x306 <__mulsf3_pse+0x7a>
 2f4:	ee 0f       	add	r30, r30
 2f6:	ff 1f       	adc	r31, r31
 2f8:	bb 1f       	adc	r27, r27
 2fa:	66 1f       	adc	r22, r22
 2fc:	77 1f       	adc	r23, r23
 2fe:	88 1f       	adc	r24, r24
 300:	91 50       	subi	r25, 0x01	; 1
 302:	50 40       	sbci	r21, 0x00	; 0
 304:	a9 f7       	brne	.-22     	; 0x2f0 <__mulsf3_pse+0x64>
 306:	9e 3f       	cpi	r25, 0xFE	; 254
 308:	51 05       	cpc	r21, r1
 30a:	70 f0       	brcs	.+28     	; 0x328 <__mulsf3_pse+0x9c>
 30c:	60 cf       	rjmp	.-320    	; 0x1ce <__fp_inf>
 30e:	aa cf       	rjmp	.-172    	; 0x264 <__fp_szero>
 310:	5f 3f       	cpi	r21, 0xFF	; 255
 312:	ec f3       	brlt	.-6      	; 0x30e <__mulsf3_pse+0x82>
 314:	98 3e       	cpi	r25, 0xE8	; 232
 316:	dc f3       	brlt	.-10     	; 0x30e <__mulsf3_pse+0x82>
 318:	86 95       	lsr	r24
 31a:	77 95       	ror	r23
 31c:	67 95       	ror	r22
 31e:	b7 95       	ror	r27
 320:	f7 95       	ror	r31
 322:	e7 95       	ror	r30
 324:	9f 5f       	subi	r25, 0xFF	; 255
 326:	c1 f7       	brne	.-16     	; 0x318 <__mulsf3_pse+0x8c>
 328:	fe 2b       	or	r31, r30
 32a:	88 0f       	add	r24, r24
 32c:	91 1d       	adc	r25, r1
 32e:	96 95       	lsr	r25
 330:	87 95       	ror	r24
 332:	97 f9       	bld	r25, 7
 334:	08 95       	ret

00000336 <_exit>:
 336:	f8 94       	cli

00000338 <__stop_program>:
 338:	ff cf       	rjmp	.-2      	; 0x338 <__stop_program>
