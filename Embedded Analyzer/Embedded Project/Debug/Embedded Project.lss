
Embedded Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000142  00800100  0000017c  00000210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000017c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000006f  00800242  00800242  00000352  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000352  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000384  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000a8  00000000  00000000  000003c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001067  00000000  00000000  0000046c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000905  00000000  00000000  000014d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006de  00000000  00000000  00001dd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002c8  00000000  00000000  000024b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005ea  00000000  00000000  00002780  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000879  00000000  00000000  00002d6a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b0  00000000  00000000  000035e3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 98 00 	jmp	0x130	; 0x130 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	12 e0       	ldi	r17, 0x02	; 2
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec e7       	ldi	r30, 0x7C	; 124
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 34       	cpi	r26, 0x42	; 66
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	22 e0       	ldi	r18, 0x02	; 2
  8c:	a2 e4       	ldi	r26, 0x42	; 66
  8e:	b2 e0       	ldi	r27, 0x02	; 2
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a1 3b       	cpi	r26, 0xB1	; 177
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 90 00 	call	0x120	; 0x120 <main>
  9e:	0c 94 bc 00 	jmp	0x178	; 0x178 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <adc_init>:
}
unsigned char uart_buffer_empty(void){
	// Returns TRUE if receive buffer is empty.
	
	return (rx_buffer_tail == rx_buffer_head);
}
  a6:	80 e4       	ldi	r24, 0x40	; 64
  a8:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
  ac:	87 e8       	ldi	r24, 0x87	; 135
  ae:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
  b2:	08 95       	ret

000000b4 <usart_init>:
  b4:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
  b8:	83 e3       	ldi	r24, 0x33	; 51
  ba:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
  be:	88 e9       	ldi	r24, 0x98	; 152
  c0:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
  c4:	86 e0       	ldi	r24, 0x06	; 6
  c6:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
  ca:	51 9a       	sbi	0x0a, 1	; 10
  cc:	50 98       	cbi	0x0a, 0	; 10
  ce:	10 92 42 02 	sts	0x0242, r1	; 0x800242 <__data_end>
  d2:	10 92 43 02 	sts	0x0243, r1	; 0x800243 <rx_buffer_tail>
  d6:	08 95       	ret

000000d8 <usart_prints>:
  d8:	cf 93       	push	r28
  da:	df 93       	push	r29
  dc:	fc 01       	movw	r30, r24
  de:	20 81       	ld	r18, Z
  e0:	22 23       	and	r18, r18
  e2:	69 f0       	breq	.+26     	; 0xfe <usart_prints+0x26>
  e4:	dc 01       	movw	r26, r24
  e6:	11 96       	adiw	r26, 0x01	; 1
  e8:	e0 ec       	ldi	r30, 0xC0	; 192
  ea:	f0 e0       	ldi	r31, 0x00	; 0
  ec:	c6 ec       	ldi	r28, 0xC6	; 198
  ee:	d0 e0       	ldi	r29, 0x00	; 0
  f0:	90 81       	ld	r25, Z
  f2:	95 ff       	sbrs	r25, 5
  f4:	fd cf       	rjmp	.-6      	; 0xf0 <usart_prints+0x18>
  f6:	28 83       	st	Y, r18
  f8:	2d 91       	ld	r18, X+
  fa:	21 11       	cpse	r18, r1
  fc:	f9 cf       	rjmp	.-14     	; 0xf0 <usart_prints+0x18>
  fe:	df 91       	pop	r29
 100:	cf 91       	pop	r28
 102:	08 95       	ret

00000104 <printHelloWorld>:
 104:	8c e0       	ldi	r24, 0x0C	; 12
 106:	e0 e0       	ldi	r30, 0x00	; 0
 108:	f1 e0       	ldi	r31, 0x01	; 1
 10a:	a4 e8       	ldi	r26, 0x84	; 132
 10c:	b2 e0       	ldi	r27, 0x02	; 2
 10e:	01 90       	ld	r0, Z+
 110:	0d 92       	st	X+, r0
 112:	8a 95       	dec	r24
 114:	e1 f7       	brne	.-8      	; 0x10e <printHelloWorld+0xa>
 116:	84 e8       	ldi	r24, 0x84	; 132
 118:	92 e0       	ldi	r25, 0x02	; 2
 11a:	0e 94 6c 00 	call	0xd8	; 0xd8 <usart_prints>
 11e:	08 95       	ret

00000120 <main>:
 120:	78 94       	sei
 122:	0e 94 53 00 	call	0xa6	; 0xa6 <adc_init>
 126:	0e 94 5a 00 	call	0xb4	; 0xb4 <usart_init>
 12a:	0e 94 82 00 	call	0x104	; 0x104 <printHelloWorld>
 12e:	ff cf       	rjmp	.-2      	; 0x12e <main+0xe>

00000130 <__vector_18>:



ISR(USART_RX_vect)
{
 130:	1f 92       	push	r1
 132:	0f 92       	push	r0
 134:	0f b6       	in	r0, 0x3f	; 63
 136:	0f 92       	push	r0
 138:	11 24       	eor	r1, r1
 13a:	8f 93       	push	r24
 13c:	ef 93       	push	r30
 13e:	ff 93       	push	r31
	// UART receive interrupt handler.
	// To do: check and warn if buffer overflows.
	
	char c = UDR0;
 140:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
	rx_buffer[rx_buffer_head] = c;
 144:	e0 91 42 02 	lds	r30, 0x0242	; 0x800242 <__data_end>
 148:	f0 e0       	ldi	r31, 0x00	; 0
 14a:	ec 5b       	subi	r30, 0xBC	; 188
 14c:	fd 4f       	sbci	r31, 0xFD	; 253
 14e:	80 83       	st	Z, r24
	if (rx_buffer_head == RX_BUFFER_SIZE - 1)
 150:	80 91 42 02 	lds	r24, 0x0242	; 0x800242 <__data_end>
 154:	8f 33       	cpi	r24, 0x3F	; 63
 156:	19 f4       	brne	.+6      	; 0x15e <__vector_18+0x2e>
	rx_buffer_head = 0;
 158:	10 92 42 02 	sts	0x0242, r1	; 0x800242 <__data_end>
 15c:	05 c0       	rjmp	.+10     	; 0x168 <__vector_18+0x38>
	else
	rx_buffer_head++;
 15e:	80 91 42 02 	lds	r24, 0x0242	; 0x800242 <__data_end>
 162:	8f 5f       	subi	r24, 0xFF	; 255
 164:	80 93 42 02 	sts	0x0242, r24	; 0x800242 <__data_end>
}
 168:	ff 91       	pop	r31
 16a:	ef 91       	pop	r30
 16c:	8f 91       	pop	r24
 16e:	0f 90       	pop	r0
 170:	0f be       	out	0x3f, r0	; 63
 172:	0f 90       	pop	r0
 174:	1f 90       	pop	r1
 176:	18 95       	reti

00000178 <_exit>:
 178:	f8 94       	cli

0000017a <__stop_program>:
 17a:	ff cf       	rjmp	.-2      	; 0x17a <__stop_program>
